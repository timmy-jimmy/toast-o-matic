#include <IRremote.h> //import remote library
#include <LiquidCrystal.h> //import LCD lib
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2; //ldd pins
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); //lcd Setup
int minutes = 0; //define vars
int seconds;
const int RECV_PIN = 6;
IRrecv irrecv(RECV_PIN);
decode_results results;
const int redPin = 10;
const int greenPin = 0;


void setup(){
  irrecv.enableIRIn(); //start IR
  irrecv.blink13(false);
  digitalWrite(1, HIGH);
  pinMode(redPin, OUTPUT); //set pinmodes
  pinMode(greenPin, OUTPUT);
  pinMode(0, OUTPUT);
  pinMode(1, OUTPUT);
  pinMode(10, OUTPUT);

  pinMode(9, INPUT);
  pinMode(8, INPUT);
  pinMode(7, INPUT);
  
}

void loop(){
    
            
    lcd.begin(16,2);
  lcd.setCursor(0,0);
  lcd.print("Set Toast Time");
  lcd.setCursor(5, 2);
 (minutes < 10) ? lcd.print("0") : NULL;
 lcd.print(minutes);
 lcd.print(":");
 (seconds < 10) ? lcd.print("0") : NULL;
 lcd.print(seconds);
  delay(100);
  ir();
  if(digitalRead(9) == HIGH){
    seconds += 10;
    delay(50);
  }
  if(digitalRead(7) == HIGH){
    seconds -= 10;
    delay(50);
  } 
   
    

  if(seconds > 59){
    minutes += 1;
    seconds -= 60;
  }
  if(seconds < 0){
    seconds += 60;
    minutes -= 1;  
  }
  if(minutes < 0 ){
    minutes += 1;
    seconds -= 50;
  }
  if(digitalRead(8) == HIGH){
timer();
  }
}
void timer() {
  lcd.begin(16, 2);
 lcd.print("Toasting...");
 digitalWrite(0, HIGH);

 delay(150);
 
 while (minutes > 0 || seconds >= 0) {
 
 lcd.setCursor(4, 2);
 (minutes < 10) ? lcd.print("0") : NULL;
 lcd.print(minutes);
 lcd.print(":");
 (seconds < 10) ? lcd.print("0") : NULL;
 lcd.print(seconds);
 lcd.display();
 stepDown();
 delay(1000);
 }
}
 
void stepDown() {
 if (seconds > 0) {
 seconds -= 1;
 } else {
 if (minutes > 0) {
 seconds = 59;
 minutes -= 1;
 } else {
  trigger();
 }
 }
}
void trigger() {
 digitalWrite(0, LOW);
 digitalWrite(10, HIGH);
 delay(2000);
 digitalWrite(10, LOW); 
 lcd.setCursor(0, 0);
 lcd.println("Done, Enjoy!         ");
 delay(5000);
 digitalWrite(1, LOW);

}
void ir(){
  if (irrecv.decode(&results)){

        switch(results.value){
          case 0xFF629D: //Vol+
          seconds += 10;
          delay(50);
          
          }

        switch(results.value){
          case 0xFF02FD: //pause
          timer();
         
          }
           switch(results.value){
          case 0xFF30CF: //1
          minutes += 1;
         
          }
           switch(results.value){
          case 0xFF18E7: //2
          minutes += 2;
         
          }
           switch(results.value){
          case 0xFF7A85: //3
          minutes += 3;
         
          }
           switch(results.value){
          case 0xFF10EF: //4
          minutes += 4;
         
          }
           switch(results.value){
          case 0xFF38C7: //5
          minutes += 5;
           }
          switch(results.value){
          case 0xFF5AA5: //6
          minutes += 6;
         
          
          }
          switch(results.value){
          case 0xFFA25D: //6
          digitalWrite(1, LOW);
         
          
          }
          switch(results.value){
          case 0xFFA857: //Vol-
          seconds -= 10;
          delay(50);
        
          }}
          irrecv.resume();
  }
